import { useState } from 'react';
import axiosPrivate from '../api/axiosPrivate';

const ProfileCreation = () => {
  const [profileData, setProfileData] = useState({
    // Fill in other fields as needed
    bio: '',
    // Add other fields as needed
    profile_picture: null, // File input
  });

  const handleFileChange = (event) => {
    setProfileData({
      ...profileData,
      profile_picture: event.target.files[0],
    });
  };

  const handleProfileCreation = async () => {
    try {
      const formData = new FormData();
      // Append other fields to formData
      formData.append('bio', profileData.bio);
      // Append other fields as needed
      formData.append('profile_picture', profileData.profile_picture);

      const response = await axiosPrivate.post('/profile/create/', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      console.log('Profile Created:', response.data);
      // Handle success, e.g., redirect or show a success message
    } catch (error) {
      console.error('Profile Creation Failed:', error);
      // Handle error, e.g., show an error message
    }
  };

  return (
    <div>
      {/* Add form fields for other profile data */}
      <input
        type="text"
        placeholder="Bio"
        value={profileData.bio}
        onChange={(e) => setProfileData({ ...profileData, bio: e.target.value })}
      />
      {/* Add other form fields as needed */}
      <input type="file" onChange={handleFileChange} />
      <button onClick={handleProfileCreation}>Create Profile</button>
    </div>
  );
};

export default ProfileCreation;


To implement dark mode using Tailwind CSS in a React application, you can follow these steps:

Install Tailwind CSS:
If you haven't already, install Tailwind CSS in your project. You can use the following commands:

bash
Copy code
# Install Tailwind CSS and its dependencies
npm install tailwindcss postcss autoprefixer
Then, initialize your project with the configuration files:

bash
Copy code
npx tailwindcss init -p
Configure Tailwind CSS for Dark Mode:
In your tailwind.config.js, you can set up dark mode by adding the following configuration:

javascript
Copy code
// tailwind.config.js

module.exports = {
  // ...
  darkMode: 'class', // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {},
  plugins: [],
};
This configuration enables dark mode based on the class you add to the <html> element.

Create a Dark Mode Toggle Component:
You can create a component that toggles the dark mode class on some global element (like the <html> or <body>). Here's a simple example:

jsx
Copy code
// DarkModeToggle.js

import { useState, useEffect } from 'react';

const DarkModeToggle = () => {
  const [darkMode, setDarkMode] = useState(false);

  useEffect(() => {
    const htmlElement = document.documentElement;
    if (darkMode) {
      htmlElement.classList.add('dark');
    } else {
      htmlElement.classList.remove('dark');
    }
  }, [darkMode]);

  return (
    <div>
      <label>
        Dark Mode
        <input
          type="checkbox"
          checked={darkMode}
          onChange={() => setDarkMode(!darkMode)}
        />
      </label>
    </div>
  );
};

export default DarkModeToggle;
Use the DarkModeToggle Component:
Import and use the DarkModeToggle component in your application:

jsx
Copy code
// App.js

import DarkModeToggle from './DarkModeToggle';

const App = () => {
  return (
    <div>
      <DarkModeToggle />
      {/* Your other components */}
    </div>
  );
};

export default App;
This component will add or remove the dark class from the <html> element, and Tailwind CSS will apply dark mode styles based on this class.

Style Your Components for Dark Mode:
You can use Tailwind CSS classes with the dark: prefix to apply styles specifically for dark mode. For example:

jsx
Copy code
<div className="bg-white dark:bg-gray-800">
  {/* Content */}
</div>
This will set the background color to white in light mode and gray-800 in dark mode.

Remember to customize the styles and configurations according to your design preferences.





  const [categoryData, setCategoryData] = useState({})
  const [loading, setLoading] = useState(true);

  const fetchdata = async () => {
    try {
      const response = await axiosPrivate.get('/categories/');
      console.log('CategoryData', response.data);
      // Assuming you have a state setter function for dashboardData
      setCategoryData(response.data);
    } catch (err) {
      if (err.response && err.response.status === 401) {
        console.log(err.response.data.error);
        // Assuming you have a function to handle the 401 error and retry the request
        // fetchdata();
      } else {
        console.log('Request Failed:', err.message);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleCategoryCreation = (e) => {
    console.log(e.target.value)
  }

  useEffect(() => {
    fetchdata();
  }, [loading]);