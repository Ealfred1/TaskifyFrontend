      <h1 className="text-2xl text-blue"> {greeting}, {auth.user.username} </h1>
      <h1 className="text-2xl text-blue">You have {dashboardData.pending_tasks} pending tasks </h1>



      <div className="bg-[rgba(255,255,255,0.12)] w-full h-full p-8 space-y-7 rounded-xl text-center sm:text-left">
            <h1 className="text-2xl text-gray-800 font-bold mb-4"> {greeting}, {auth.user.username} </h1>
            <h1 className="text-xl text-gray-600">You have {dashboardData.pending_tasks} pending tasks </h1>

          </div>


          import React from 'react';

const UpcomingTasks = ({ data }) => {
  const getUpcomingTasks = () => {
    const today = new Date();

    return (
      <div>
        <h2>Upcoming Tasks</h2>
        {data.recent_tasks && data.recent_tasks.length > 0 ? (
          data.recent_tasks
            .filter((task) => new Date(task.due_date) >= today)
            .map((task) => (
              <div key={task.id} className="task-item">
                <h3>{task.title}</h3>
                <p>
                  <strong>Category:</strong> {task.category}
                </p>
                <p>
                  <strong>Due Date:</strong> {task.due_date}
                </p>
                <p>
                  <strong>Status:</strong> {task.status}
                </p>
              </div>
            ))
        ) : (
          <p>No upcoming tasks</p>
        )}
      </div>
    );
  };

  return getUpcomingTasks();
};

export default UpcomingTasks;





import { createContext, useState, useEffect } from 'react';
import axios from '../api/axios';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

const AuthContext = createContext({});

export const AuthProvider = ({ children }) => {
  const [auth, setAuth] = useState(localStorage.getItem('authTokens') ? JSON.parse(localStorage.getItem('authTokens')) : {});
  const [loading, setLoading] = useState(true);
  const [initialFetchComplete, setInitialFetchComplete] = useState(false);

  const updateToken = async () => {
    console.log('token updated');
    setLoading(true);

    try {
      const response = await axios.post(
        '/login/refresh/',
        JSON.stringify({ refresh: auth?.refresh }),
        {
          headers: { 'Content-Type': 'application/json' },
          withCredentials: true,
        }
      );

      setAuth((prevAuth) => ({
        ...prevAuth,
        access: response.data.access,
        refresh: response.data.refresh,
      }));

      const updatedTokens = {
        ...auth,
        access: response.data.access,
        refresh: response.data.refresh,
      };
      console.log('token', updatedTokens);

      localStorage.setItem('authTokens', JSON.stringify(updatedTokens));
    } catch (err) {
      if (!err?.response) {
        console.log('no server response');
      } else if (err.response.status === 400) {
        console.log(err.response.data.error);
      } else {
        console.log('Request Failed');
        logout();
      }
    } finally {
      setLoading(false);
      setInitialFetchComplete(true); // Set initialFetchComplete to true after the first data fetch
    }
  };

  const logout = () => {
    setAuth({});
    localStorage.removeItem('authTokens');
    toast.info("You've been logged out", {
      position: toast.POSITION.TOP_RIGHT,
    });
  };

  useEffect(() => {
    updateToken();
    const fourMinutes = 1000 * 60 * 4;

    const interval = setInterval(() => {
      auth && updateToken();
    }, fourMinutes);
    return () => clearInterval(interval);
  }, [auth]);

  // Render children only when initial data fetching is complete
  return initialFetchComplete ? (
    <AuthContext.Provider value={{ auth, setAuth, logout }}>
      {children}
    </AuthContext.Provider>
  ) : null;
};

export default AuthContext;
